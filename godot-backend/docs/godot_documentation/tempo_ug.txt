.. _tempo_ug:


Tempo User's Guide
##################

Overview
========

The tempo library is used for high precision time computations such as handling time formats and computing conversions between time scales. 

In GODOT, the tempo library and in particular the C++ classes `template <typename S> godot::tempo::EpochT` and the timescale
conversion function `godot::tempo::convert` are templated to allow use with and without gradients. 
The single template parameter is either double or `autodif::xdouble`.

The class is exposed to Python as two separate classes py:class::godot.core.tempo.Epoch and py:class::godot.core.tempo.XEpoch.

The Epoch Class
================

A point in time is defined with the :py:class::godot.core.tempo.Epoch` class.

Epoch Constructors
------------------

An Epoch is constructed by specifying a Time and a TimeScale. There are several constructors to choose from:

.. doctest::

    >>> import godot.core.tempo as tempo
    >>> # integer days and float fraction of day since reference
    >>> time = tempo.Epoch(1234, 0.11, tempo.TimeScale.TAI, tempo.JulianDay.MJD2000)
    >>> # using a float days since reference
    >>> time = tempo.Epoch(1234.11, tempo.TimeScale.TAI, tempo.JulianDay.MJD2000)

Each Epoch instance has a :py:class::godot.tempo.TimeScale property, follow the link to see the available time scales.

The internal representation of an Epoch is defined as the sum of a pair of numbers:

- integer seconds since 2000-01-01T00:00:00.000 in the instance TimeScale (int64_t) 
- fractional seconds in the instance TimeScale (double or autodif::xdouble)

One can also create an Epoch from a string:

.. doctest::

    >>> t1 = tempo.Epoch("2016-12-31T23:59:59 UTC")  # Calendar
    >>> t2 = tempo.Epoch("2016-121T23:59:59 UTC")   # DOY
    >>> t3 = tempo.Epoch("2451544.5 JD TT")         # JD
    >>> t4 = tempo.Epoch("10.5 TT")                 # JD assuming MJD2000

Epoch Operations
----------------

The Epoch class supports addition and subtraction of seconds, subtraction of Epochs and Boolean comparison operators.


.. doctest::

    >>> epoch = tempo.Epoch(23412345, 0.12345678910112, tempo.TimeScale.TAI, tempo.JulianDay.MJD2000)
    >>> epoch += 23.0  # increment by 23 seconds
    >>> epoch2 = epoch - 12.0  # create a new epoch 12 seconds earlier.
    >>> dur = epoch2 - epoch  # find the duration between two Epochs of the same TimeScale
    >>> flag = epoch2 > epoch  # compare two Epochs
    >>> print(dur)
    -12.0
    >>> print(flag)
    False

.. note:: Subtraction and equality comparison can only be done between Epochs with the same TimeScale *there is no automatic conversion performed*.

.. doctest::

    >>> epoch1 = tempo.Epoch(0.0, tempo.TimeScale.TCG, tempo.JulianDay.MJD2000)
    >>> epoch2 = tempo.Epoch(1.0, tempo.TimeScale.TAI, tempo.JulianDay.MJD2000)
    >>> try:
    ...     dur = epoch2 - epoch1  # This will throw an exception
    ... except:
    ...     print("an exception was thrown")
    an exception was thrown

The Epoch class has an additional :py:any:godot.core.tempo.Side property. This is not used for the standard comparisons but only for resolving ambiguity at discontinuities.

.. doctest::

    >>> epoch1 = tempo.Epoch(123, 0.123, tempo.TimeScale.TDB, tempo.JulianDay.MJD2000, tempo.Right)
    >>> epoch2 = tempo.Epoch(123, 0.12299999999, tempo.TimeScale.TDB, tempo.JulianDay.MJD2000, tempo.Left)
    >>> epoch3 = tempo.Epoch(123, 0.123, tempo.TimeScale.TDB, tempo.JulianDay.MJD2000, tempo.Left)
    >>> 
    >>> flag1 = epoch2 == epoch1 
    >>> print(flag1)
    False
    >>> flag2 = epoch1 > epoch2 
    >>> print(flag2)
    True
    >>> flag3 = epoch3 < epoch1 
    >>> print(flag3)
    False
    >>> flag4 = epoch3 == epoch1  # True - the Side is not used for the comparison operators and must be used explicitly
    >>> print(flag4)
    True

All constructors accept the :py:any:godot.core.tempo.Side as an optional property. The default value is Right.


Julian Days
===========

The Epoch class can be used to extract the time in days, according to several :py:any::godot.tempo.JulianDay specifications. Follow the link to see the available Julian day types.

The method :py:method:godot.tempo.Epoch.jd returns the day as a double, :py:method:godot.tempo.Epoch.jdPair returns an integer, double pair in days. 

.. doctest::

    >>> epoch = tempo.Epoch(123, 0.123, tempo.TimeScale.TAI, tempo.JulianDay.MJD2000, tempo.Right)
    >>> days = epoch.jd(tempo.TimeScale.TAI, tempo.JulianDay.CCSDS)
    >>> print(days)
    15463.123 
    >>> daysAndFraction = epoch.jdPair(tempo.TimeScale.TAI, tempo.JulianDay.CCSDS)
    >>> print(str(daysAndFraction.day)) # doctest: +SKIP
    >>> print(str(daysAndFraction.fraction))


Timescale Conversions
=====================

TimeScale conversion is performed using the function :py:function::godot.core.tempo.convert

.. doctest::

    >>> t1 = tempo.Epoch(0, 0.1, tempo.TimeScale.TAI, tempo.JulianDay.MJD2000)
    >>> t2 = tempo.convert(tempo.TimeScale.TT, t1)
    >>> t3 = tempo.convert(tempo.TimeScale.TAI, t2)
    >>> print(t2)
    2000-01-01T02:24:32.184000 TT
    >>> print(t3)
    2000-01-01T02:24:00.000000 TAI


.. todo::
    This example

.. todo::
    The Epoch operator does not output partials


Note that it is not possible to convert to and from UTC using ::py:function::godot.core.tempo.convert since UTC is not handled as a normal
time scale.

Use of UTC 
==========

UTC is not a continuous time scale, this makes it problematic to implement in the software. 
The fact that UTC is different from all the other time scales means that it has to be treated differently, 
or that the whole tempo system should implement special cases for UTC, with checks. To avoid this and the
associated slowdown, for performance critical,low level applications we have ommitted UTC from the list of 
available :py:class::godot.core.tempo.TimeScale.

When a UTC epoch is required to be used, specify UTC as the string "UTC". Internally the UTC time will be converted to TAI.

This means that computations involving leap seconds will be performed correctly but when you want to output 
the result in UTC you will need to request it explicitly.

.. doctest::

    >>> # leap second in interval
    >>> t1 = tempo.Epoch("2016-12-31T23:59:59 UTC")
    >>> t2 = tempo.Epoch("2017-01-01T00:00:03 UTC")
    >>> print(t2 - t1) 
    5.0
    >>> t2 = tempo.convert(tempo.TimeScale.TAI, t2)
    >>> t1 = tempo.convert(tempo.TimeScale.TAI, t1)
    >>> print(t2 - t1) 
    5.0
    >>> 
    >>> t3 = tempo.Epoch("2017-12-31T23:59:59 UTC")
    >>> print(t3)
    2018-01-01T00:00:36.000000 TAI
    >>> t4 = tempo.Epoch("2018-01-01T00:00:03 UTC")
    >>> print(t4)
    2018-01-01T00:00:40.000000 TAI
    >>> print(t4 - t3)
    4.0
    >>> t4 = tempo.convert(tempo.TimeScale.TAI, t4)
    >>> t3 = tempo.convert(tempo.TimeScale.TAI, t3)
    >>> print(t4 - t3)
    4.0
    >>> print(t4.calStr("UTC"))
    2018-01-01T00:00:03.000000 UTC


Output Epoch to String
======================

One can write an Epoch to string in many different ways. A selection is given below:

.. doctest::

    >>> t = tempo.Epoch("2018-01-01T00:00:00 TDB")
    >>> print(t.calStr("UTC", 3))
    2017-12-31T23:58:50.816 UTC
    >>> print(t.calStr("UTC", 6))
    2017-12-31T23:58:50.816078 UTC
    >>> print(t.calStr(tempo.TimeScale.TAI, 6))
    2017-12-31T23:59:27.816078 TAI
    >>> print(t.calStr(tempo.TimeScale.TDB, 6))
    2018-01-01T00:00:00.000000 TDB
    >>> print(t.doyStr("UTC", 3))
    2017-365T23:58:50.816 UTC
    >>> print(t.doyStr(tempo.TimeScale.TAI, 6))
    2017-365T23:59:27.816078 TAI
    >>> print(t.jdStr(tempo.TimeScale.TDB, tempo.JulianDay.MJD2000, 6))
    6575.000000 MJD2000 TDB 
    >>> print(t.jdStr(tempo.TimeScale.TAI, tempo.JulianDay.JD, 6))
    2458119.499628 JD TAI

            

The XEpoch Class
================

A point in time including gradients is defined with the :py:class::godot.core.tempo.XEpoch` class.

To constuct simply use the XEpoch constructor:

.. doctest::

    >>> import godot.core.autodif as ad 
    >>> e = tempo.XEpoch("2018-01-01T00:00:00 TDB")

    computing gradients are done as follows, if an autodif delta is used to 
    change the XEpoch, the gradients are passed to the XEpoch as follows:

.. doctest::

    >>> delta = ad.Scalar(0.0,'delta')
    >>> print(e)
                               Value
      2018-01-01T00:00:00.000000 TDB
    <BLANKLINE>
    >>> e += 4.0*delta
    >>> print(e)
                               Value |         delta
      2018-01-01T00:00:00.000000 TDB |  4.000000e+00
    <BLANKLINE>    
    >>> e.convertTo(tempo.TimeScale.TT)
                               Value |         delta
       2018-01-01T00:00:00.000078 TT |  4.000000e+00
    <BLANKLINE>
